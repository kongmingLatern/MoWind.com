<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Welcome To my Blog</title>
    <url>/2022/04/11/index/</url>
    <content><![CDATA[<blockquote>
<p>欢迎来到我的博客~~！我会经常分享一些关于编程上的文章和看法，喜欢的可以收藏关注一下呀！</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>我的日常专区</title>
    <url>/2022/04/11/DailyLife/index/</url>
    <content><![CDATA[<blockquote>
<p>这里我会记录我学习的过程以及分享一些我的日常生活~~</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>问题解决专区</title>
    <url>/2022/04/11/SolveProblems/index/</url>
    <content><![CDATA[<blockquote>
<p>这里会罗列我在编程上所遇到的各种问题以及我对这些问题的解决方案</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>知识分享专区</title>
    <url>/2022/04/11/ShareKnowledge/index/</url>
    <content><![CDATA[<blockquote>
<p>这里我会分享我喜欢的技术以及一些好的文章！</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Vue3 源码解读 -- 响应式</title>
    <url>/2022/04/11/vue/reactivity/effect/</url>
    <content><![CDATA[<h1 id="响应式-设计思路"><a href="#响应式-设计思路" class="headerlink" title="响应式 设计思路"></a>响应式 设计思路</h1><h2 id="vue2-的响应式处理"><a href="#vue2-的响应式处理" class="headerlink" title="vue2 的响应式处理"></a>vue2 的响应式处理</h2><p>在了解 vue3 的响应式之前，需要了解下 vue2 是如何实现响应式的：<br>vue2 通过<code>Object.defineProperty</code> API来实现数据的响应式<br>但是这个API具有以下的缺点：</p>
<ul>
<li><strong>不能监听对象属性</strong>新增和删除</li>
<li>初始化阶段递归执行<code>Object.defineProperty</code><strong>性能负担大</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;random&quot;</span>&gt;</span>改变 msg 的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  export default &#123;</span><br><span class="line">    created() &#123;</span><br><span class="line">      // 通过生命周期会定义一个数据</span><br><span class="line">      this.msg = &#x27;I&#x27;m creating at created&#x27; </span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      random() &#123;</span><br><span class="line">        this.msg = Math.random()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>问题</strong>：当你执行完上述代码后，你会发现</p>
<blockquote>
<p>msg 的值并未发生改变。</p>
</blockquote>
<p><strong>解释：</strong></p>
<blockquote>
<p>在 created 中定义 this.msg <strong>并不是响应式对象</strong><br>因为在 vue2 中，只有 data 中定义的数据才具有响应式</p>
</blockquote>
<h3 id="使用-vue3-改写"><a href="#使用-vue3-改写" class="headerlink" title="使用 vue3 改写"></a>使用 vue3 改写</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;random&quot;</span>&gt;</span>改变 msg 的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  export default &#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">      const state = reactive(&#123;</span><br><span class="line">        msg: &#x27;I&#x27;m msg&#x27;</span><br><span class="line">      &#125;)</span><br><span class="line">      const random = () =&gt; &#123;</span><br><span class="line">        state.msg = Math.randmon()</span><br><span class="line">      &#125;</span><br><span class="line">      return &#123;</span><br><span class="line">        random,</span><br><span class="line">        ...toRef(state)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="vue3-的响应式处理"><a href="#vue3-的响应式处理" class="headerlink" title="vue3 的响应式处理"></a>vue3 的响应式处理</h2><p>通过 <code>Proxy</code> API 来劫持 <code>target</code> 对象的 <code>getter</code> 和 <code>setter</code> 来实现响应式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">因为Proxy劫持的是整个对象，所以它可以检测到任何对 对象 的修改</span><br><span class="line">弥补了 Object.defineProperty 的不足</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<blockquote>
<p>因为 <code>Proxy</code> 劫持的是<strong>当前对象的本身</strong>，所以对于<strong>对象内部还可能存在的对象</strong>，在一开始去实现响应式【<strong>触发 get</strong>】的时候，它（子对象）<strong>并不是响应式</strong>的，需要通过判断当前对象属性是否仍是一个对象，如果是一个对象，则需要还通过<code>递归</code>的方式去重新给子对象设置响应式。</p>
</blockquote>
<p>这里用 <code>reactive</code> 的响应式实现代码来演示<br>具体如何实现 get 和 set 操作的可以查看我的 <code>reactive.md</code></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">math</span>: &#123;</span><br><span class="line">    <span class="attr">score</span>: <span class="number">88</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">user.<span class="property">math</span>.<span class="property">score</span> ++</span><br><span class="line"><span class="comment">// Proxy 的 get 函数中</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// 先获取用户所需要的值，例如 user.math.score</span></span><br><span class="line"><span class="comment">// target -&gt; user</span></span><br><span class="line"><span class="comment">// age    -&gt; math</span></span><br><span class="line"><span class="comment">// res -&gt; user.math -&gt; isObject -&gt; reactive(user.math) ...</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key)</span><br><span class="line"><span class="comment">// 判断 res 是否是一个对象</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isObject</span>(res)) &#123; </span><br><span class="line">  <span class="comment">// 如果是一个对象，则给它继续设置响应式</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">reactive</span>(res)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="响应式的实现【简易】"><a href="#响应式的实现【简易】" class="headerlink" title="响应式的实现【简易】"></a>响应式的实现【简易】</h2><p>实现响应式需要分为几个步骤：</p>
<ul>
<li>创建 effect</li>
<li>执行 fn</li>
<li>触发 get</li>
<li>执行 track</li>
<li>把 effect 收集起来作为依赖</li>
</ul>
<p>我们先用 <code>jest</code> 来编写我们期望的 <code>effect</code> 函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;effect&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;happy path&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">age</span>: <span class="number">10</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> nextAge</span><br><span class="line">    <span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      nextAge = user.<span class="property">age</span> + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 当我们第一次写 effect() 的时候默认执行一次，并在 get 操作时将该依赖收集</span></span><br><span class="line">    <span class="title function_">expect</span>(nextAge).<span class="title function_">toBe</span>(<span class="number">11</span>) </span><br><span class="line"></span><br><span class="line">    user.<span class="property">age</span>++</span><br><span class="line">    <span class="comment">// 当函数内部的对象触发了 set 操作后，需要再次调用 effect 的函数</span></span><br><span class="line">    <span class="title function_">expect</span>(nextAge).<span class="title function_">toBe</span>(<span class="number">12</span>) </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>[依赖收集]</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// get 操作 =&gt; target =&gt; key =&gt; dep</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  结构</span></span><br><span class="line"><span class="comment">  [target]</span></span><br><span class="line"><span class="comment">      -&gt; [key] </span></span><br><span class="line"><span class="comment">            -&gt; [fn()]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="meta">@params</span></span><br><span class="line">  <span class="attr">target</span>: 当前对象</span><br><span class="line">  <span class="attr">key</span>: 字段</span><br><span class="line">  <span class="attr">dep</span>: 依赖</span><br><span class="line">  ----------第一种情况----------</span><br><span class="line">  <span class="title function_">effect</span>(<span class="keyword">function</span> <span class="title function_">effectFn1</span>(<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    user.<span class="property">age1</span></span><br><span class="line">  &#125;)</span><br><span class="line"> </span><br><span class="line">  <span class="title function_">effect</span>(<span class="keyword">function</span> <span class="title function_">effectFn2</span>(<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    user.<span class="property">age1</span></span><br><span class="line">  &#125;)</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  [结构]</span></span><br><span class="line"><span class="comment">  user</span></span><br><span class="line"><span class="comment">    -&gt; age1</span></span><br><span class="line"><span class="comment">          -&gt; effectFn1</span></span><br><span class="line"><span class="comment">          -&gt; effectFn2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  ----------第二种情况----------</span><br><span class="line">  <span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    user.<span class="property">age1</span></span><br><span class="line">    user.<span class="property">age2</span></span><br><span class="line">  &#125;)</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  [结构]</span></span><br><span class="line"><span class="comment">  user</span></span><br><span class="line"><span class="comment">    -&gt; age1</span></span><br><span class="line"><span class="comment">          -&gt; effect</span></span><br><span class="line"><span class="comment">    -&gt; age2</span></span><br><span class="line"><span class="comment">          -&gt; effect</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  ----------第三种情况----------</span><br><span class="line">  <span class="title function_">effect</span>(<span class="keyword">function</span> <span class="title function_">effectFn1</span>(<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    user.<span class="property">age1</span></span><br><span class="line">  &#125;)</span><br><span class="line"> </span><br><span class="line">  <span class="title function_">effect</span>(<span class="keyword">function</span> <span class="title function_">effectFn2</span>(<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    user.<span class="property">age2</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  user</span></span><br><span class="line"><span class="comment">    -&gt; age1</span></span><br><span class="line"><span class="comment">          -&gt; effectFn1</span></span><br><span class="line"><span class="comment">    -&gt; age2</span></span><br><span class="line"><span class="comment">          -&gt; effectFn2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>使用<code>TypeScript</code>来实现功能</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createGetter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key)</span><br><span class="line">      <span class="comment">// 收集依赖</span></span><br><span class="line">      <span class="title function_">track</span>(target,key)</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">      <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value)</span><br><span class="line">      <span class="comment">// 触发依赖</span></span><br><span class="line">      <span class="title function_">trigger</span>(target, key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> activeEffect <span class="comment">// 用来保存当前的函数</span></span><br><span class="line"><span class="keyword">let</span> bucket = <span class="keyword">new</span> <span class="title class_">Map</span>() <span class="comment">// 桶，用来存放所有依赖</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">track</span>(<span class="params">target: <span class="built_in">any</span>, key: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 先尝试获取 target</span></span><br><span class="line">  <span class="keyword">let</span> targetMap = bucket.<span class="title function_">get</span>(target) </span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!targetMap) &#123;</span><br><span class="line">     <span class="comment">// 如果没有取到 target，就初始化</span></span><br><span class="line">      bucket.<span class="title function_">set</span>(target, (targetMap = <span class="keyword">new</span> <span class="title class_">Map</span>()))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取到了以后，再尝试去获取依赖</span></span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.<span class="title function_">get</span>(key)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!depsMap) &#123;</span><br><span class="line">    targetMap.<span class="title function_">set</span>(key, (depsMap = <span class="keyword">new</span> <span class="title class_">Set</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 已经获取到了依赖，将他收集起来即可</span></span><br><span class="line">  depsMap.<span class="title function_">add</span>(activeEffect)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">  <span class="comment">// 触发依赖</span></span><br><span class="line">  <span class="keyword">let</span> targetMap = bucket.<span class="title function_">get</span>(target)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.<span class="title function_">get</span>(key)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> dep <span class="keyword">of</span> targetMap[key]) &#123;</span><br><span class="line">    <span class="title function_">dep</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params">fn: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  activeEffect = fn</span><br><span class="line">  <span class="title function_">fn</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Vue3 源码解读 -- reactive</title>
    <url>/2022/04/11/vue/reactivity/reactive/</url>
    <content><![CDATA[<h1 id="Reactive-依赖收集思路"><a href="#Reactive-依赖收集思路" class="headerlink" title="Reactive 依赖收集思路"></a>Reactive 依赖收集思路</h1><h2 id="Reactive-API"><a href="#Reactive-API" class="headerlink" title="Reactive API"></a>Reactive API</h2><p><code>createReactiveObject</code> ： 创建 <code>reactive</code> 对象</p>
<blockquote>
<p>函数首先判断 <code>target</code> 是否是一个<code>数组</code> 或者 <code>对象</code>类型，如果不是直接返回。<br>原始数据 <code>target</code> 必须是<code>数组</code> 或者 <code>对象</code><br>对于一个<strong>已经是响应式</strong>的对象，再次执行后<strong>仍旧应该是一个响应式对象</strong></p>
</blockquote>
<h2 id="reactive-的底层实现"><a href="#reactive-的底层实现" class="headerlink" title="reactive 的底层实现"></a>reactive 的底层实现</h2><p>使用 <code>TypeScript</code> 实现 reactive [基本流程]</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">raw</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">      <span class="comment">// 返回该对象的属性值</span></span><br><span class="line">      <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key)</span><br><span class="line">      <span class="comment">// 如果获取到的对象依旧是一个对象，那么给他的内部继续包裹 reactive</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isObject</span>(res)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">reactive</span>(res)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 收集依赖，具体收集可以查看 effect.md</span></span><br><span class="line">      <span class="title function_">track</span>(target, key)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">      <span class="comment">// 更改指定 key 的值</span></span><br><span class="line">      <span class="keyword">const</span> <span class="attr">res</span>: <span class="built_in">boolean</span> = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value)</span><br><span class="line">      <span class="comment">// 触发依赖</span></span><br><span class="line">      <span class="title function_">trigger</span>(target, key)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
